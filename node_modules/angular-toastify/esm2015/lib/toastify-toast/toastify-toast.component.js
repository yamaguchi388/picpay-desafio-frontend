import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostListener, Input, NgZone, Output } from '@angular/core';
import { ToastType } from '../toast-type';
import { Toast } from '../toast';
export class ToastifyToastComponent {
    constructor(_cd, _zone) {
        this._cd = _cd;
        this._zone = _zone;
        this.autoClose = 5000;
        this.hideProgressBar = false;
        this.pauseOnHover = true;
        this.pauseOnVisibilityChange = true;
        this.closeOnClick = true;
        this.dismissEvent = new EventEmitter();
        this.ToastType = ToastType;
        this.running = false;
    }
    ngOnInit() {
        this.autoCloseRemaining = this.autoClose;
        this.startTime = this.toast.time;
        // Do not start timer when toast is prompted while window is out of focus
        if (this.handleVisibilityChange && document.visibilityState === 'visible') {
            this.startCloseTimer();
        }
    }
    ngOnDestroy() {
        this.clearTimerTimeout();
    }
    startCloseTimer() {
        if (this.running || !this.autoClose) {
            return;
        }
        this.startTime = new Date().getTime();
        this.running = true;
        this.autoDismissTimeout = this._zone.runOutsideAngular(() => setTimeout(() => {
            this._zone.run(() => {
                this.dismissEvent.emit();
                this._cd.markForCheck();
            });
        }, this.autoCloseRemaining));
    }
    pauseCloseTimer() {
        this.running = false;
        this.clearTimerTimeout();
        // Calculate the elapsed time, subtract remaining time
        this.pauseTime = new Date().getTime();
        const elapsed = this.pauseTime - this.startTime;
        this.autoCloseRemaining -= elapsed;
    }
    clearTimerTimeout() {
        if (this.autoDismissTimeout !== undefined) {
            clearTimeout(this.autoDismissTimeout);
        }
    }
    handleDismissButtonAction() {
        if (this.closeOnClick) {
            return; // Let the other event handle the dismissal
        }
        this.clearTimerTimeout();
        this.dismissEvent.emit();
    }
    handleHostClick() {
        if (this.closeOnClick) {
            this.clearTimerTimeout();
            this.dismissEvent.emit();
        }
    }
    handleMouseEnter() {
        if (this.pauseOnHover) {
            this.pauseCloseTimer();
        }
    }
    handleMouseLeave() {
        if (this.pauseOnHover) {
            this.startCloseTimer();
        }
    }
    handleVisibilityChange() {
        if (!this.pauseOnVisibilityChange) {
            return;
        }
        if (document.visibilityState !== 'visible') {
            this.pauseCloseTimer();
            this._cd.detectChanges();
        }
        else {
            this.startCloseTimer();
        }
    }
}
ToastifyToastComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'lib-toastify-toast',
                template: "<div role=\"alert\" class=\"toast-body\">\n    <div class=\"icon-container\">\n        <span *ngIf=\"iconLibrary == 'material'\" [ngSwitch]=\"toast.type\">\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.info\">info_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.default\">info_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.warning\">warning_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.error\">error_outline</i>\n            <i class=\"material-icons\" *ngSwitchCase=\"ToastType.success\">done</i>\n        </span>\n        <span *ngIf=\"iconLibrary == 'font-awesome'\" [ngSwitch]=\"toast.type\">\n            <i *ngSwitchCase=\"ToastType.info\" class=\"fa fa-info\"></i>\n            <i *ngSwitchCase=\"ToastType.default\" class=\"fa fa-info\"></i>\n            <i *ngSwitchCase=\"ToastType.warning\" class=\"fa fa-exclamation-triangle\"></i>\n            <i *ngSwitchCase=\"ToastType.error\" class=\"fa fa-exclamation\"></i>\n            <i *ngSwitchCase=\"ToastType.success\" class=\"fa fa-check\"></i>\n        </span>\n    </div>\n    <div class=\"toast-container\">\n        <span>{{toast.message}}</span>\n    </div>\n</div>\n<button (click)=\"handleDismissButtonAction()\" class=\"close-button close-button--{{ToastType[toast.type]}}\" type=\"button\" aria-label=\"close\">\u2716</button>\n<div *ngIf=\"!hideProgressBar\" class=\"progress-bar progress-bar--{{ToastType[toast.type]}}\"\n    [style.animation-play-state]=\"running? 'running' : 'paused'\" [style.animation-duration]=\"this.autoClose + 'ms'\" style=\"opacity: 1;\"></div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".toast{position:relative;min-height:64px;box-sizing:border-box;margin-bottom:1rem;padding:8px;border-radius:1px;box-shadow:0 1px 10px 0 rgba(0,0,0,.1),0 2px 15px 0 rgba(0,0,0,.05);display:flex;justify-content:space-between;max-height:800px;overflow:hidden;font-family:sans-serif;cursor:pointer;direction:ltr}.toast--rtl{direction:rtl}.toast--default{background:#fff;color:#aaa}.toast--info{background:#3498db}.toast--success{background:#07bc0c}.toast--warning{background:#f1c40f}.toast--error{background:#e74c3c}.toast-body{margin:auto 0;flex:1}@media only screen and (max-width:480px){.toast{margin-bottom:0}}.close-button{color:#fff;font-weight:700;font-size:14px;background:transparent;outline:none;border:none;padding:0;cursor:pointer;opacity:.7;transition:.3s ease;align-self:flex-start}.close-button--default{color:#000;opacity:.3}.close-button:focus,.close-button:hover{opacity:1}@-webkit-keyframes trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}@keyframes trackProgress{0%{transform:scaleX(1)}to{transform:scaleX(0)}}.progress-bar{position:absolute;bottom:0;left:0;width:100%;height:5px;z-index:9999;opacity:.7;background-color:hsla(0,0%,100%,.7);transform-origin:left}.progress-bar,.progress-bar--animated{-webkit-animation:trackProgress linear 1 forwards;animation:trackProgress linear 1 forwards}.progress-bar--controlled{transition:transform .2s}.progress-bar--rtl{right:0;left:auto;transform-origin:right}.progress-bar--default{background:linear-gradient(90deg,#4cd964,#5ac8fa,#007aff,#34aadc,#5856d6,#ff2d55)}.icon-container,.toast-body{vertical-align:middle}.icon-container{display:inline-block;width:25px}.icon-container span{margin-right:.5rem;display:inline-block;text-align:center;width:20px}.icon-container span i{vertical-align:middle}.fa,.material-icons{font-size:18px}.toast-container{display:inline-block;width:calc(100% - 25px);vertical-align:middle}"]
            },] }
];
/** @nocollapse */
ToastifyToastComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone }
];
ToastifyToastComponent.propDecorators = {
    autoClose: [{ type: Input }],
    hideProgressBar: [{ type: Input }],
    pauseOnHover: [{ type: Input }],
    pauseOnVisibilityChange: [{ type: Input }],
    closeOnClick: [{ type: Input }],
    toast: [{ type: Input }],
    iconLibrary: [{ type: Input }],
    dismissEvent: [{ type: Output }],
    handleHostClick: [{ type: HostListener, args: ['click',] }],
    handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    handleMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    handleVisibilityChange: [{ type: HostListener, args: ['document:visibilitychange',] }]
};
//# sourceMappingURL=data:application/json;base64,